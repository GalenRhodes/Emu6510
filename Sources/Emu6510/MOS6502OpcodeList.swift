/*******************************************************************************************************************************************************************************//*
 *     PROJECT: Emu6510
 *    FILENAME: MOS6502OpcodeList.swift
 *         IDE: AppCode
 *      AUTHOR: Galen Rhodes
 *        DATE: 05/14/2021
 *
 * Copyright Â© 2021 Galen Rhodes. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this
 * permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *//******************************************************************************************************************************************************************************/

import Foundation
import CoreFoundation
import Rubicon

//@f:0
/*===============================================================================================================================================================================*/
/// All of the possible 256 opcodes.  DO NOT CHANGE THE ORDER OF THESE!!!!
///
public let mos6502OpcodeList: [MOS6502Opcode] = [
    MOS6502Opcode(opcode: 0x00, mnemonic: .BRK, addressingMode: .IMP,  cycles: 7, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x01, mnemonic: .ORA, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x02, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x03, mnemonic: .SLO, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x04, mnemonic: .NOP, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x05, mnemonic: .ORA, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x06, mnemonic: .ASL, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x07, mnemonic: .SLO, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x08, mnemonic: .PHP, addressingMode: .IMP,  cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x09, mnemonic: .ORA, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x0a, mnemonic: .ASL, addressingMode: .ACC,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x0b, mnemonic: .ANC, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x0c, mnemonic: .NOP, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x0d, mnemonic: .ORA, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x0e, mnemonic: .ASL, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x0f, mnemonic: .SLO, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x10, mnemonic: .BPL, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x11, mnemonic: .ORA, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x12, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x13, mnemonic: .SLO, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x14, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x15, mnemonic: .ORA, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x16, mnemonic: .ASL, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x17, mnemonic: .SLO, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x18, mnemonic: .CLC, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry ]),
    MOS6502Opcode(opcode: 0x19, mnemonic: .ORA, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x1a, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x1b, mnemonic: .SLO, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x1c, mnemonic: .NOP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x1d, mnemonic: .ORA, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x1e, mnemonic: .ASL, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x1f, mnemonic: .SLO, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x20, mnemonic: .JSR, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x21, mnemonic: .AND, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x22, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x23, mnemonic: .RLA, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x24, mnemonic: .BIT, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x25, mnemonic: .AND, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x26, mnemonic: .ROL, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x27, mnemonic: .RLA, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x28, mnemonic: .PLP, addressingMode: .IMP,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .IRQ, .Decimal, .Break, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x29, mnemonic: .AND, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x2a, mnemonic: .ROL, addressingMode: .ACC,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x2b, mnemonic: .ANC, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x2c, mnemonic: .BIT, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x2d, mnemonic: .AND, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x2e, mnemonic: .ROL, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x2f, mnemonic: .RLA, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x30, mnemonic: .BMI, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x31, mnemonic: .AND, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x32, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x33, mnemonic: .RLA, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x34, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x35, mnemonic: .AND, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x36, mnemonic: .ROL, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x37, mnemonic: .RLA, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x38, mnemonic: .SEC, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry ]),
    MOS6502Opcode(opcode: 0x39, mnemonic: .AND, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x3a, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x3b, mnemonic: .RLA, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x3c, mnemonic: .NOP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x3d, mnemonic: .AND, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x3e, mnemonic: .ROL, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x3f, mnemonic: .RLA, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x40, mnemonic: .RTI, addressingMode: .IMP,  cycles: 6, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x41, mnemonic: .EOR, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x42, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x43, mnemonic: .SRE, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x44, mnemonic: .NOP, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x45, mnemonic: .EOR, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x46, mnemonic: .LSR, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x47, mnemonic: .SRE, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x48, mnemonic: .PHA, addressingMode: .IMP,  cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x49, mnemonic: .EOR, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x4a, mnemonic: .LSR, addressingMode: .ACC,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x4b, mnemonic: .ALR, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x4c, mnemonic: .JMP, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x4d, mnemonic: .EOR, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x4e, mnemonic: .LSR, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x4f, mnemonic: .SRE, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x50, mnemonic: .BVC, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x51, mnemonic: .EOR, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x52, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x53, mnemonic: .SRE, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x54, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x55, mnemonic: .EOR, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x56, mnemonic: .LSR, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x57, mnemonic: .SRE, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x58, mnemonic: .CLI, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .IRQ ]),
    MOS6502Opcode(opcode: 0x59, mnemonic: .EOR, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x5a, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x5b, mnemonic: .SRE, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x5c, mnemonic: .NOP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x5d, mnemonic: .EOR, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x5e, mnemonic: .LSR, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x5f, mnemonic: .SRE, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x60, mnemonic: .RTS, addressingMode: .IMP,  cycles: 6, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x61, mnemonic: .ADC, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x62, mnemonic: .KIL, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x63, mnemonic: .RRA, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x64, mnemonic: .NOP, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x65, mnemonic: .ADC, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x66, mnemonic: .ROR, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x67, mnemonic: .RRA, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x68, mnemonic: .PLA, addressingMode: .IMP,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x69, mnemonic: .ADC, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x6a, mnemonic: .ROR, addressingMode: .ACC,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x6b, mnemonic: .ARR, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x6c, mnemonic: .JMP, addressingMode: .IND,  cycles: 5, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x6d, mnemonic: .ADC, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x6e, mnemonic: .ROR, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x6f, mnemonic: .RRA, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x70, mnemonic: .BVS, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x71, mnemonic: .ADC, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x72, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x73, mnemonic: .RRA, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x74, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x75, mnemonic: .ADC, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x76, mnemonic: .ROR, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x77, mnemonic: .RRA, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x78, mnemonic: .SEI, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .IRQ ]),
    MOS6502Opcode(opcode: 0x79, mnemonic: .ADC, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x7a, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x7b, mnemonic: .RRA, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x7c, mnemonic: .NOP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x7d, mnemonic: .ADC, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x7e, mnemonic: .ROR, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x7f, mnemonic: .RRA, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0x80, mnemonic: .NOP, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x81, mnemonic: .STA, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x82, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x83, mnemonic: .SAX, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: []), // This is called ASX in other sources.
    MOS6502Opcode(opcode: 0x84, mnemonic: .STY, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x85, mnemonic: .STA, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x86, mnemonic: .STX, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x87, mnemonic: .SAX, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: []), // This is called ASX in other sources.
    MOS6502Opcode(opcode: 0x88, mnemonic: .DEY, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x89, mnemonic: .NOP, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x8a, mnemonic: .TXA, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x8b, mnemonic: .XAA, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x8c, mnemonic: .STY, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x8d, mnemonic: .STA, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x8e, mnemonic: .STX, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x8f, mnemonic: .SAX, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: []), // This is called ASX in other sources.
    MOS6502Opcode(opcode: 0x90, mnemonic: .BCC, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x91, mnemonic: .STA, addressingMode: .INDY, cycles: 6, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x92, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x93, mnemonic: .AHX, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x94, mnemonic: .STY, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x95, mnemonic: .STA, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x96, mnemonic: .STX, addressingMode: .ZPY,  cycles: 4, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x97, mnemonic: .SAX, addressingMode: .ZPY,  cycles: 3, plus1: false, illegal: true,  affectedFlags: []), // This is called ASX in other sources.
    MOS6502Opcode(opcode: 0x98, mnemonic: .TYA, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0x99, mnemonic: .STA, addressingMode: .ABSY, cycles: 5, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x9a, mnemonic: .TXS, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x9b, mnemonic: .TAS, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x9c, mnemonic: .SHY, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x9d, mnemonic: .STA, addressingMode: .ABSX, cycles: 5, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0x9e, mnemonic: .SHX, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0x9f, mnemonic: .AHX, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xa0, mnemonic: .LDY, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa1, mnemonic: .LDA, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa2, mnemonic: .LDX, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa3, mnemonic: .LAX, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa4, mnemonic: .LDY, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa5, mnemonic: .LDA, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa6, mnemonic: .LDX, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa7, mnemonic: .LAX, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa8, mnemonic: .TAY, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xa9, mnemonic: .LDA, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xaa, mnemonic: .TAX, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xab, mnemonic: .LAX, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xac, mnemonic: .LDY, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xad, mnemonic: .LDA, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xae, mnemonic: .LDX, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xaf, mnemonic: .LAX, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb0, mnemonic: .BCS, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0xb1, mnemonic: .LDA, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb2, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xb3, mnemonic: .LAX, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb4, mnemonic: .LDY, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb5, mnemonic: .LDA, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb6, mnemonic: .LDX, addressingMode: .ZPY,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb7, mnemonic: .LAX, addressingMode: .ZPY,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xb8, mnemonic: .CLV, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Overflow ]),
    MOS6502Opcode(opcode: 0xb9, mnemonic: .LDA, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xba, mnemonic: .TSX, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xbb, mnemonic: .LAS, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xbc, mnemonic: .LDY, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xbd, mnemonic: .LDA, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xbe, mnemonic: .LDX, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xbf, mnemonic: .LAX, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc0, mnemonic: .CPY, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc1, mnemonic: .CMP, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc2, mnemonic: .NOP, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xc3, mnemonic: .DCP, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc4, mnemonic: .CPY, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc5, mnemonic: .CMP, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc6, mnemonic: .DEC, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc7, mnemonic: .DCP, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc8, mnemonic: .INY, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xc9, mnemonic: .CMP, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xca, mnemonic: .DEX, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xcb, mnemonic: .AXS, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]), // This is called "SAX" in other sources.
    MOS6502Opcode(opcode: 0xcc, mnemonic: .CPY, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xcd, mnemonic: .CMP, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xce, mnemonic: .DEC, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xcf, mnemonic: .DCP, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd0, mnemonic: .BNE, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0xd1, mnemonic: .CMP, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd2, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xd3, mnemonic: .DCP, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd4, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xd5, mnemonic: .CMP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd6, mnemonic: .DEC, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd7, mnemonic: .DCP, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xd8, mnemonic: .CLD, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Decimal ]),
    MOS6502Opcode(opcode: 0xd9, mnemonic: .CMP, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xda, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xdb, mnemonic: .DCP, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xdc, mnemonic: .NOP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xdd, mnemonic: .CMP, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xde, mnemonic: .DEC, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xdf, mnemonic: .DCP, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xe0, mnemonic: .CPX, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xe1, mnemonic: .SBC, addressingMode: .INDX, cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xe2, mnemonic: .NOP, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xe3, mnemonic: .ISC, addressingMode: .INDX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xe4, mnemonic: .CPX, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xe5, mnemonic: .SBC, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xe6, mnemonic: .INC, addressingMode: .ZP,   cycles: 5, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xe7, mnemonic: .ISC, addressingMode: .ZP,   cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xe8, mnemonic: .INX, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xe9, mnemonic: .SBC, addressingMode: .IMM,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xea, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0xeb, mnemonic: .SBC, addressingMode: .IMM,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xec, mnemonic: .CPX, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xed, mnemonic: .SBC, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xee, mnemonic: .INC, addressingMode: .ABS,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xef, mnemonic: .ISC, addressingMode: .ABS,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xf0, mnemonic: .BEQ, addressingMode: .REL,  cycles: 2, plus1: true , illegal: false, affectedFlags: []),
    MOS6502Opcode(opcode: 0xf1, mnemonic: .SBC, addressingMode: .INDY, cycles: 5, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xf2, mnemonic: .KIL, addressingMode: .IMP,  cycles: 0, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xf3, mnemonic: .ISC, addressingMode: .INDY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xf4, mnemonic: .NOP, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xf5, mnemonic: .SBC, addressingMode: .ZPX,  cycles: 4, plus1: false, illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xf6, mnemonic: .INC, addressingMode: .ZPX,  cycles: 6, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xf7, mnemonic: .ISC, addressingMode: .ZPX,  cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xf8, mnemonic: .SED, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: false, affectedFlags: [ .Decimal ]),
    MOS6502Opcode(opcode: 0xf9, mnemonic: .SBC, addressingMode: .ABSY, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xfa, mnemonic: .NOP, addressingMode: .IMP,  cycles: 2, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xfb, mnemonic: .ISC, addressingMode: .ABSY, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xfc, mnemonic: .NOP, addressingMode: .ABS,  cycles: 4, plus1: false, illegal: true,  affectedFlags: []),
    MOS6502Opcode(opcode: 0xfd, mnemonic: .SBC, addressingMode: .ABSX, cycles: 4, plus1: true , illegal: false, affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
    MOS6502Opcode(opcode: 0xfe, mnemonic: .INC, addressingMode: .ABSX, cycles: 7, plus1: false, illegal: false, affectedFlags: [ .Zero, .Negative ]),
    MOS6502Opcode(opcode: 0xff, mnemonic: .ISC, addressingMode: .ABSX, cycles: 3, plus1: false, illegal: true,  affectedFlags: [ .Carry, .Zero, .Overflow, .Negative ]),
]
//@f:1
